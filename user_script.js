// ==UserScript==
// @name         YouTube Dual Subtitles for French, German, Russian, Ukrainian
// @namespace    http://tampermonkey.net/
// @version      1.1
// @license      Unlicense
// @description  Add dual subtitles to YouTube videos
// @author       Jim Chen
// @homepage     https://jimchen.me
// @supportURL   https://github.com/jimchen2/youtube-dual-subtitles/issues
// @match        https://www.youtube.com/watch?*
// @match        https://www.youtube.com/embed/*
// @match        https://m.youtube.com/watch?*
// @match        https://m.youtube.com/embed/*
// @match        https://cdn.jimchen.me/*
// @run-at       document-idle
// ==/UserScript==

(function () {
  "use strict";

  console.log("[Dual Subs] Script initialized");

  async function handleVideoNavigation() {
    console.log("[Dual Subs] Navigation detected");
    removeSubs();
    await processSubtitles();
  }

  async function processSubtitles() {
    console.log("[Dual Subs] Starting subtitle processing");
    const playerData = await new Promise((resolve) => {
      const checkForPlayer = () => {
        const captionData = getCaptionData();
        if (captionData) {
          resolve(captionData);
        } else {
          setTimeout(checkForPlayer, 500);
        }
      };
      checkForPlayer();
    });

    const { captionTracks, translationLanguages } = playerData;

    const learningTrack = findLearningTrack(captionTracks);
    await addSubtitles(learningTrack, translationLanguages);
  }

  function getCaptionData() {
    if (window.location.href.startsWith("https://www.youtube")) {
      return document.getElementsByTagName("ytd-app")[0].data.playerResponse.captions.playerCaptionsTracklistRenderer;
    } else {
      return document.getElementsByTagName("ytm-app")[0].data.playerResponse.captions.playerCaptionsTracklistRenderer;
    }
  }

  function findLearningTrack(captionTracks) {
    const autoGenerated = captionTracks.find((track) => ["a.ru", "a.uk", "a.de", "a.fr"].includes(track.vssId));

    if (autoGenerated) {
      console.log("[Dual Subs] Found auto-generated track");
      return autoGenerated;
    }

    const manualTrack = captionTracks.find((track) => [".ru", ".uk", ".de", ".fr"].includes(track.vssId));

    console.log("[Dual Subs] Found manual track");
    return manualTrack;
  }

  async function addSubtitles(learningTrack, translationLanguages) {
    const englishLang = translationLanguages.find((lang) => lang.languageCode == "en");

    if (englishLang) {
      await addSubtitle(`${learningTrack.baseUrl}&fmt=vtt&tlang=${englishLang.languageCode}`, "en");
    }

    const originalLang = learningTrack.vssId.replace(/[.a]/g, "");
    await addSubtitle(`${learningTrack.baseUrl}&fmt=vtt`, originalLang);
  }

  async function addSubtitle(url, lang) {
    console.log(`[Dual Subs] Adding ${lang} subtitles`);
    const video = document.querySelector("video");
    const response = await fetch(url);
    const subtitleData = (await response.text()).replaceAll("align:start position:0%", "");

    const track = document.createElement("track");
    track.default = true;
    track.src = "data:text/vtt," + encodeURIComponent(subtitleData);
    video.appendChild(track);
    track.track.mode = "showing";
    console.log(`[Dual Subs] Successfully added ${lang} subtitles`);
  }

  // Wait for page load and YouTube's own scripts to initialize
  let lastUrl = location.href;
  const observer = new MutationObserver(() => {
    if (location.href !== lastUrl) {
      lastUrl = location.href;
      setTimeout(handleVideoNavigation, 1000);
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });

  // Initial run
  setTimeout(handleVideoNavigation, 1000);

  function removeSubs() {
    var video = document.getElementsByTagName("video")[0];
    Array.from(video.getElementsByTagName("track")).forEach(function (ele) {
      ele.track.mode = "hidden";
      ele.parentNode.removeChild(ele);
    });
  }
})();
