document.addEventListener("yt-navigate-finish", () => {
  remove_subs();
  initializeAndAddSubtitles();
});

async function initializeAndAddSubtitles() {
  executed = 0;

  // Inject the script to get data
  const captionData = await new Promise((resolve) => {
    const script = document.createElement("script");
    script.textContent = `document.body.setAttribute('data-player-response', 
    JSON.stringify(document.getElementsByTagName('ytd-app')[0].data.playerResponse.captions.playerCaptionsTracklistRenderer))`;
    document.body.appendChild(script);
    const response = document.body.getAttribute("youtube-extension-subtitle-data-response");
    resolve(JSON.parse(response));
  });

  if (executed) return;
  executed = 1;

  const { captionTracks, translationLanguages } = captionData;
  const learningTrack = (() => {
    // First try to find auto-generated subtitles, if no auto-generated found, try manual subtitles
    const autoGenerated = captionTracks.find((track) => track.vssId === "a.ru" || track.vssId === "a.uk" || track.vssId === "a.de" || track.vssId === "a.fr");
    if (autoGenerated) return autoGenerated;
    return captionTracks.find((track) => track.vssId === ".ru" || track.vssId === ".uk" || track.vssId === ".de" || track.vssId === ".fr");
  })();

  if (learningTrack) {
    const englishLang = translationLanguages.find((lang) => lang.languageName.simpleText === "English");
    if (englishLang) {
      await addSubtitle(`${learningTrack.baseUrl}&fmt=vtt&tlang=${englishLang.languageCode}`, "en");
    }
    // Determine the original language from vssId and add corresponding subtitle
    const originalLang = learningTrack.vssId.replace(/[.a]/g, "");
    await addSubtitle(`${learningTrack.baseUrl}&fmt=vtt`, originalLang);
  }
}
async function addSubtitle(url, lang) {
  const video = document.querySelector("video");
  const response = await fetch(url);
  const subtitleData = (await response.text()).replaceAll("align:start position:0%", "");

  const track = document.createElement("track");
  track.default = true;
  track.src = "data:text/vtt," + encodeURIComponent(subtitleData);
  video.appendChild(track);
}

function remove_subs() {
  var video = document.getElementsByTagName("video")[0];
  Array.from(video.getElementsByTagName("track")).forEach(function (ele) {
    ele.track.mode = "hidden";
    ele.parentNode.removeChild(ele);
  });
}
