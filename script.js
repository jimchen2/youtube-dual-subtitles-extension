let executed = 0;

console.log("Dual Sub Script Start");

document.addEventListener("yt-navigate-finish", () => {
  const video = document.querySelector("video");
  if (video) {
    Array.from(video.getElementsByTagName("track")).forEach((track) => {
      track.track.mode = "hidden";
      track.remove();
    });
  }
  initializeAndAddSubtitles();
});

async function initializeAndAddSubtitles() {
  // Inject the script to get data
  const playerData = await new Promise((resolve) => {
    console.log("1111111");
    console.log("1111111");
    console.log("1111111");
    console.log("1111111");

    console.log(window.location);
    console.log("222222");
    console.log("222222");

    // Desktop Site
    if (window.location.href.startsWith("https://www.youtube.com")) {
      console.log("Desktop");
      const script = document.createElement("script");
      script.textContent = `document.body.setAttribute('data-player-response', 
          JSON.stringify(document.getElementsByTagName('ytd-app')[0].data.playerResponse))`;
      document.body.appendChild(script);
      script.remove();
      const response = document.body.getAttribute("data-player-response");
      document.body.removeAttribute("data-player-response");
      resolve(JSON.parse(response));
    } else {
      // Mobile Site
      resolve(window.ytInitialPlayerResponse);
    }
  });

  console.log("poaisjdpfoisajdpofisajd");
  console.log("poaisjdpfoisajdpofisajd");
  console.log("poaisjdpfoisajdpofisajd");
  console.log("poaisjdpfoisajdpofisajd");
  console.log("poaisjdpfoisajdpofisajd");
  console.log(playerData);

  if (!playerData?.captions || executed) return;
  executed = 1;

  const { captionTracks, translationLanguages } = playerData.captions.playerCaptionsTracklistRenderer;

  const learningTrack = (() => {
    // First try to find auto-generated subtitles
    const autoGenerated = captionTracks.find((track) => track.vssId === "a.ru" || track.vssId === "a.uk" || track.vssId === "a.de" || track.vssId === "a.fr");
    if (autoGenerated) return autoGenerated;

    // If no auto-generated found, try manual subtitles
    return captionTracks.find((track) => track.vssId === ".ru" || track.vssId === ".uk" || track.vssId === ".de" || track.vssId === ".fr");
  })();

  if (learningTrack) {
    const englishLang = translationLanguages.find((lang) => lang.languageName.simpleText === "English");

    if (englishLang) {
      await addSubtitle(`${learningTrack.baseUrl}&fmt=vtt&tlang=${englishLang.languageCode}`, "en");
    }

    // Determine the original language from vssId and add corresponding subtitle
    const originalLang = learningTrack.vssId.replace(/[.a]/g, "");
    await addSubtitle(`${learningTrack.baseUrl}&fmt=vtt`, originalLang);
  }
}

async function addSubtitle(url, lang) {
  const video = document.querySelector("video");
  if (!video) return;

  const response = await fetch(url);
  const subtitleData = (await response.text()).replaceAll("align:start position:0%", "");

  const track = document.createElement("track");
  track.default = true;
  track.srclang = lang;
  track.src = "data:text/vtt," + encodeURIComponent(subtitleData);

  video.appendChild(track);
  track.track.mode = "showing";
}
